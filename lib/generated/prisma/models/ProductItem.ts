
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProductItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProductItem
 * 
 */
export type ProductItemModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductItemPayload>

export type AggregateProductItem = {
  _count: ProductItemCountAggregateOutputType | null
  _avg: ProductItemAvgAggregateOutputType | null
  _sum: ProductItemSumAggregateOutputType | null
  _min: ProductItemMinAggregateOutputType | null
  _max: ProductItemMaxAggregateOutputType | null
}

export type ProductItemAvgAggregateOutputType = {
  price: number | null
  size: number | null
  pizzaType: number | null
}

export type ProductItemSumAggregateOutputType = {
  price: number | null
  size: number | null
  pizzaType: number | null
}

export type ProductItemMinAggregateOutputType = {
  id: string | null
  productId: string | null
  price: number | null
  size: number | null
  pizzaType: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProductItemMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  price: number | null
  size: number | null
  pizzaType: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProductItemCountAggregateOutputType = {
  id: number
  productId: number
  price: number
  size: number
  pizzaType: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProductItemAvgAggregateInputType = {
  price?: true
  size?: true
  pizzaType?: true
}

export type ProductItemSumAggregateInputType = {
  price?: true
  size?: true
  pizzaType?: true
}

export type ProductItemMinAggregateInputType = {
  id?: true
  productId?: true
  price?: true
  size?: true
  pizzaType?: true
  createdAt?: true
  updatedAt?: true
}

export type ProductItemMaxAggregateInputType = {
  id?: true
  productId?: true
  price?: true
  size?: true
  pizzaType?: true
  createdAt?: true
  updatedAt?: true
}

export type ProductItemCountAggregateInputType = {
  id?: true
  productId?: true
  price?: true
  size?: true
  pizzaType?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProductItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductItem to aggregate.
   */
  where?: Prisma.ProductItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductItems to fetch.
   */
  orderBy?: Prisma.ProductItemOrderByWithRelationInput | Prisma.ProductItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductItems
  **/
  _count?: true | ProductItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductItemMaxAggregateInputType
}

export type GetProductItemAggregateType<T extends ProductItemAggregateArgs> = {
      [P in keyof T & keyof AggregateProductItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductItem[P]>
    : Prisma.GetScalarType<T[P], AggregateProductItem[P]>
}




export type ProductItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductItemWhereInput
  orderBy?: Prisma.ProductItemOrderByWithAggregationInput | Prisma.ProductItemOrderByWithAggregationInput[]
  by: Prisma.ProductItemScalarFieldEnum[] | Prisma.ProductItemScalarFieldEnum
  having?: Prisma.ProductItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductItemCountAggregateInputType | true
  _avg?: ProductItemAvgAggregateInputType
  _sum?: ProductItemSumAggregateInputType
  _min?: ProductItemMinAggregateInputType
  _max?: ProductItemMaxAggregateInputType
}

export type ProductItemGroupByOutputType = {
  id: string
  productId: string
  price: number
  size: number | null
  pizzaType: number | null
  createdAt: Date
  updatedAt: Date
  _count: ProductItemCountAggregateOutputType | null
  _avg: ProductItemAvgAggregateOutputType | null
  _sum: ProductItemSumAggregateOutputType | null
  _min: ProductItemMinAggregateOutputType | null
  _max: ProductItemMaxAggregateOutputType | null
}

type GetProductItemGroupByPayload<T extends ProductItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductItemGroupByOutputType[P]>
      }
    >
  >



export type ProductItemWhereInput = {
  AND?: Prisma.ProductItemWhereInput | Prisma.ProductItemWhereInput[]
  OR?: Prisma.ProductItemWhereInput[]
  NOT?: Prisma.ProductItemWhereInput | Prisma.ProductItemWhereInput[]
  id?: Prisma.StringFilter<"ProductItem"> | string
  productId?: Prisma.StringFilter<"ProductItem"> | string
  price?: Prisma.FloatFilter<"ProductItem"> | number
  size?: Prisma.IntNullableFilter<"ProductItem"> | number | null
  pizzaType?: Prisma.IntNullableFilter<"ProductItem"> | number | null
  createdAt?: Prisma.DateTimeFilter<"ProductItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProductItem"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  cartItems?: Prisma.CartItemListRelationFilter
}

export type ProductItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  size?: Prisma.SortOrderInput | Prisma.SortOrder
  pizzaType?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
  cartItems?: Prisma.CartItemOrderByRelationAggregateInput
}

export type ProductItemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProductItemWhereInput | Prisma.ProductItemWhereInput[]
  OR?: Prisma.ProductItemWhereInput[]
  NOT?: Prisma.ProductItemWhereInput | Prisma.ProductItemWhereInput[]
  productId?: Prisma.StringFilter<"ProductItem"> | string
  price?: Prisma.FloatFilter<"ProductItem"> | number
  size?: Prisma.IntNullableFilter<"ProductItem"> | number | null
  pizzaType?: Prisma.IntNullableFilter<"ProductItem"> | number | null
  createdAt?: Prisma.DateTimeFilter<"ProductItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProductItem"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  cartItems?: Prisma.CartItemListRelationFilter
}, "id">

export type ProductItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  size?: Prisma.SortOrderInput | Prisma.SortOrder
  pizzaType?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProductItemCountOrderByAggregateInput
  _avg?: Prisma.ProductItemAvgOrderByAggregateInput
  _max?: Prisma.ProductItemMaxOrderByAggregateInput
  _min?: Prisma.ProductItemMinOrderByAggregateInput
  _sum?: Prisma.ProductItemSumOrderByAggregateInput
}

export type ProductItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductItemScalarWhereWithAggregatesInput | Prisma.ProductItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductItemScalarWhereWithAggregatesInput | Prisma.ProductItemScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProductItem"> | string
  productId?: Prisma.StringWithAggregatesFilter<"ProductItem"> | string
  price?: Prisma.FloatWithAggregatesFilter<"ProductItem"> | number
  size?: Prisma.IntNullableWithAggregatesFilter<"ProductItem"> | number | null
  pizzaType?: Prisma.IntNullableWithAggregatesFilter<"ProductItem"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProductItem"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProductItem"> | Date | string
}

export type ProductItemCreateInput = {
  id?: string
  price: number
  size?: number | null
  pizzaType?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutProductItemsInput
  cartItems?: Prisma.CartItemCreateNestedManyWithoutProductItemInput
}

export type ProductItemUncheckedCreateInput = {
  id?: string
  productId: string
  price: number
  size?: number | null
  pizzaType?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  cartItems?: Prisma.CartItemUncheckedCreateNestedManyWithoutProductItemInput
}

export type ProductItemUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pizzaType?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutProductItemsNestedInput
  cartItems?: Prisma.CartItemUpdateManyWithoutProductItemNestedInput
}

export type ProductItemUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pizzaType?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cartItems?: Prisma.CartItemUncheckedUpdateManyWithoutProductItemNestedInput
}

export type ProductItemCreateManyInput = {
  id?: string
  productId: string
  price: number
  size?: number | null
  pizzaType?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProductItemUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pizzaType?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductItemUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pizzaType?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductItemListRelationFilter = {
  every?: Prisma.ProductItemWhereInput
  some?: Prisma.ProductItemWhereInput
  none?: Prisma.ProductItemWhereInput
}

export type ProductItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  size?: Prisma.SortOrder
  pizzaType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProductItemAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
  size?: Prisma.SortOrder
  pizzaType?: Prisma.SortOrder
}

export type ProductItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  size?: Prisma.SortOrder
  pizzaType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProductItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  size?: Prisma.SortOrder
  pizzaType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProductItemSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
  size?: Prisma.SortOrder
  pizzaType?: Prisma.SortOrder
}

export type ProductItemScalarRelationFilter = {
  is?: Prisma.ProductItemWhereInput
  isNot?: Prisma.ProductItemWhereInput
}

export type ProductItemCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductItemCreateWithoutProductInput, Prisma.ProductItemUncheckedCreateWithoutProductInput> | Prisma.ProductItemCreateWithoutProductInput[] | Prisma.ProductItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductItemCreateOrConnectWithoutProductInput | Prisma.ProductItemCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductItemCreateManyProductInputEnvelope
  connect?: Prisma.ProductItemWhereUniqueInput | Prisma.ProductItemWhereUniqueInput[]
}

export type ProductItemUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductItemCreateWithoutProductInput, Prisma.ProductItemUncheckedCreateWithoutProductInput> | Prisma.ProductItemCreateWithoutProductInput[] | Prisma.ProductItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductItemCreateOrConnectWithoutProductInput | Prisma.ProductItemCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductItemCreateManyProductInputEnvelope
  connect?: Prisma.ProductItemWhereUniqueInput | Prisma.ProductItemWhereUniqueInput[]
}

export type ProductItemUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductItemCreateWithoutProductInput, Prisma.ProductItemUncheckedCreateWithoutProductInput> | Prisma.ProductItemCreateWithoutProductInput[] | Prisma.ProductItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductItemCreateOrConnectWithoutProductInput | Prisma.ProductItemCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductItemUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductItemUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductItemCreateManyProductInputEnvelope
  set?: Prisma.ProductItemWhereUniqueInput | Prisma.ProductItemWhereUniqueInput[]
  disconnect?: Prisma.ProductItemWhereUniqueInput | Prisma.ProductItemWhereUniqueInput[]
  delete?: Prisma.ProductItemWhereUniqueInput | Prisma.ProductItemWhereUniqueInput[]
  connect?: Prisma.ProductItemWhereUniqueInput | Prisma.ProductItemWhereUniqueInput[]
  update?: Prisma.ProductItemUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductItemUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductItemUpdateManyWithWhereWithoutProductInput | Prisma.ProductItemUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductItemScalarWhereInput | Prisma.ProductItemScalarWhereInput[]
}

export type ProductItemUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductItemCreateWithoutProductInput, Prisma.ProductItemUncheckedCreateWithoutProductInput> | Prisma.ProductItemCreateWithoutProductInput[] | Prisma.ProductItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductItemCreateOrConnectWithoutProductInput | Prisma.ProductItemCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductItemUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductItemUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductItemCreateManyProductInputEnvelope
  set?: Prisma.ProductItemWhereUniqueInput | Prisma.ProductItemWhereUniqueInput[]
  disconnect?: Prisma.ProductItemWhereUniqueInput | Prisma.ProductItemWhereUniqueInput[]
  delete?: Prisma.ProductItemWhereUniqueInput | Prisma.ProductItemWhereUniqueInput[]
  connect?: Prisma.ProductItemWhereUniqueInput | Prisma.ProductItemWhereUniqueInput[]
  update?: Prisma.ProductItemUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductItemUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductItemUpdateManyWithWhereWithoutProductInput | Prisma.ProductItemUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductItemScalarWhereInput | Prisma.ProductItemScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ProductItemCreateNestedOneWithoutCartItemsInput = {
  create?: Prisma.XOR<Prisma.ProductItemCreateWithoutCartItemsInput, Prisma.ProductItemUncheckedCreateWithoutCartItemsInput>
  connectOrCreate?: Prisma.ProductItemCreateOrConnectWithoutCartItemsInput
  connect?: Prisma.ProductItemWhereUniqueInput
}

export type ProductItemUpdateOneRequiredWithoutCartItemsNestedInput = {
  create?: Prisma.XOR<Prisma.ProductItemCreateWithoutCartItemsInput, Prisma.ProductItemUncheckedCreateWithoutCartItemsInput>
  connectOrCreate?: Prisma.ProductItemCreateOrConnectWithoutCartItemsInput
  upsert?: Prisma.ProductItemUpsertWithoutCartItemsInput
  connect?: Prisma.ProductItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProductItemUpdateToOneWithWhereWithoutCartItemsInput, Prisma.ProductItemUpdateWithoutCartItemsInput>, Prisma.ProductItemUncheckedUpdateWithoutCartItemsInput>
}

export type ProductItemCreateWithoutProductInput = {
  id?: string
  price: number
  size?: number | null
  pizzaType?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  cartItems?: Prisma.CartItemCreateNestedManyWithoutProductItemInput
}

export type ProductItemUncheckedCreateWithoutProductInput = {
  id?: string
  price: number
  size?: number | null
  pizzaType?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  cartItems?: Prisma.CartItemUncheckedCreateNestedManyWithoutProductItemInput
}

export type ProductItemCreateOrConnectWithoutProductInput = {
  where: Prisma.ProductItemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductItemCreateWithoutProductInput, Prisma.ProductItemUncheckedCreateWithoutProductInput>
}

export type ProductItemCreateManyProductInputEnvelope = {
  data: Prisma.ProductItemCreateManyProductInput | Prisma.ProductItemCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ProductItemUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductItemWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductItemUpdateWithoutProductInput, Prisma.ProductItemUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ProductItemCreateWithoutProductInput, Prisma.ProductItemUncheckedCreateWithoutProductInput>
}

export type ProductItemUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductItemWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductItemUpdateWithoutProductInput, Prisma.ProductItemUncheckedUpdateWithoutProductInput>
}

export type ProductItemUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ProductItemScalarWhereInput
  data: Prisma.XOR<Prisma.ProductItemUpdateManyMutationInput, Prisma.ProductItemUncheckedUpdateManyWithoutProductInput>
}

export type ProductItemScalarWhereInput = {
  AND?: Prisma.ProductItemScalarWhereInput | Prisma.ProductItemScalarWhereInput[]
  OR?: Prisma.ProductItemScalarWhereInput[]
  NOT?: Prisma.ProductItemScalarWhereInput | Prisma.ProductItemScalarWhereInput[]
  id?: Prisma.StringFilter<"ProductItem"> | string
  productId?: Prisma.StringFilter<"ProductItem"> | string
  price?: Prisma.FloatFilter<"ProductItem"> | number
  size?: Prisma.IntNullableFilter<"ProductItem"> | number | null
  pizzaType?: Prisma.IntNullableFilter<"ProductItem"> | number | null
  createdAt?: Prisma.DateTimeFilter<"ProductItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProductItem"> | Date | string
}

export type ProductItemCreateWithoutCartItemsInput = {
  id?: string
  price: number
  size?: number | null
  pizzaType?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutProductItemsInput
}

export type ProductItemUncheckedCreateWithoutCartItemsInput = {
  id?: string
  productId: string
  price: number
  size?: number | null
  pizzaType?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProductItemCreateOrConnectWithoutCartItemsInput = {
  where: Prisma.ProductItemWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductItemCreateWithoutCartItemsInput, Prisma.ProductItemUncheckedCreateWithoutCartItemsInput>
}

export type ProductItemUpsertWithoutCartItemsInput = {
  update: Prisma.XOR<Prisma.ProductItemUpdateWithoutCartItemsInput, Prisma.ProductItemUncheckedUpdateWithoutCartItemsInput>
  create: Prisma.XOR<Prisma.ProductItemCreateWithoutCartItemsInput, Prisma.ProductItemUncheckedCreateWithoutCartItemsInput>
  where?: Prisma.ProductItemWhereInput
}

export type ProductItemUpdateToOneWithWhereWithoutCartItemsInput = {
  where?: Prisma.ProductItemWhereInput
  data: Prisma.XOR<Prisma.ProductItemUpdateWithoutCartItemsInput, Prisma.ProductItemUncheckedUpdateWithoutCartItemsInput>
}

export type ProductItemUpdateWithoutCartItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pizzaType?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutProductItemsNestedInput
}

export type ProductItemUncheckedUpdateWithoutCartItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pizzaType?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductItemCreateManyProductInput = {
  id?: string
  price: number
  size?: number | null
  pizzaType?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProductItemUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pizzaType?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cartItems?: Prisma.CartItemUpdateManyWithoutProductItemNestedInput
}

export type ProductItemUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pizzaType?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cartItems?: Prisma.CartItemUncheckedUpdateManyWithoutProductItemNestedInput
}

export type ProductItemUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pizzaType?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ProductItemCountOutputType
 */

export type ProductItemCountOutputType = {
  cartItems: number
}

export type ProductItemCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cartItems?: boolean | ProductItemCountOutputTypeCountCartItemsArgs
}

/**
 * ProductItemCountOutputType without action
 */
export type ProductItemCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItemCountOutputType
   */
  select?: Prisma.ProductItemCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProductItemCountOutputType without action
 */
export type ProductItemCountOutputTypeCountCartItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CartItemWhereInput
}


export type ProductItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  price?: boolean
  size?: boolean
  pizzaType?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  cartItems?: boolean | Prisma.ProductItem$cartItemsArgs<ExtArgs>
  _count?: boolean | Prisma.ProductItemCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productItem"]>

export type ProductItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  price?: boolean
  size?: boolean
  pizzaType?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productItem"]>

export type ProductItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  price?: boolean
  size?: boolean
  pizzaType?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productItem"]>

export type ProductItemSelectScalar = {
  id?: boolean
  productId?: boolean
  price?: boolean
  size?: boolean
  pizzaType?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProductItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "price" | "size" | "pizzaType" | "createdAt" | "updatedAt", ExtArgs["result"]["productItem"]>
export type ProductItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  cartItems?: boolean | Prisma.ProductItem$cartItemsArgs<ExtArgs>
  _count?: boolean | Prisma.ProductItemCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProductItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $ProductItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductItem"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
    cartItems: Prisma.$CartItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
    price: number
    size: number | null
    pizzaType: number | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["productItem"]>
  composites: {}
}

export type ProductItemGetPayload<S extends boolean | null | undefined | ProductItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductItemPayload, S>

export type ProductItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductItemCountAggregateInputType | true
  }

export interface ProductItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductItem'], meta: { name: 'ProductItem' } }
  /**
   * Find zero or one ProductItem that matches the filter.
   * @param {ProductItemFindUniqueArgs} args - Arguments to find a ProductItem
   * @example
   * // Get one ProductItem
   * const productItem = await prisma.productItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductItemFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductItemClient<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductItemFindUniqueOrThrowArgs} args - Arguments to find a ProductItem
   * @example
   * // Get one ProductItem
   * const productItem = await prisma.productItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductItemClient<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductItemFindFirstArgs} args - Arguments to find a ProductItem
   * @example
   * // Get one ProductItem
   * const productItem = await prisma.productItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductItemFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductItemClient<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductItemFindFirstOrThrowArgs} args - Arguments to find a ProductItem
   * @example
   * // Get one ProductItem
   * const productItem = await prisma.productItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductItemClient<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductItems
   * const productItems = await prisma.productItem.findMany()
   * 
   * // Get first 10 ProductItems
   * const productItems = await prisma.productItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productItemWithIdOnly = await prisma.productItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductItemFindManyArgs>(args?: Prisma.SelectSubset<T, ProductItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductItem.
   * @param {ProductItemCreateArgs} args - Arguments to create a ProductItem.
   * @example
   * // Create one ProductItem
   * const ProductItem = await prisma.productItem.create({
   *   data: {
   *     // ... data to create a ProductItem
   *   }
   * })
   * 
   */
  create<T extends ProductItemCreateArgs>(args: Prisma.SelectSubset<T, ProductItemCreateArgs<ExtArgs>>): Prisma.Prisma__ProductItemClient<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductItems.
   * @param {ProductItemCreateManyArgs} args - Arguments to create many ProductItems.
   * @example
   * // Create many ProductItems
   * const productItem = await prisma.productItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductItemCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductItems and returns the data saved in the database.
   * @param {ProductItemCreateManyAndReturnArgs} args - Arguments to create many ProductItems.
   * @example
   * // Create many ProductItems
   * const productItem = await prisma.productItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductItems and only return the `id`
   * const productItemWithIdOnly = await prisma.productItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductItem.
   * @param {ProductItemDeleteArgs} args - Arguments to delete one ProductItem.
   * @example
   * // Delete one ProductItem
   * const ProductItem = await prisma.productItem.delete({
   *   where: {
   *     // ... filter to delete one ProductItem
   *   }
   * })
   * 
   */
  delete<T extends ProductItemDeleteArgs>(args: Prisma.SelectSubset<T, ProductItemDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductItemClient<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductItem.
   * @param {ProductItemUpdateArgs} args - Arguments to update one ProductItem.
   * @example
   * // Update one ProductItem
   * const productItem = await prisma.productItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductItemUpdateArgs>(args: Prisma.SelectSubset<T, ProductItemUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductItemClient<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductItems.
   * @param {ProductItemDeleteManyArgs} args - Arguments to filter ProductItems to delete.
   * @example
   * // Delete a few ProductItems
   * const { count } = await prisma.productItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductItems
   * const productItem = await prisma.productItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductItemUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductItems and returns the data updated in the database.
   * @param {ProductItemUpdateManyAndReturnArgs} args - Arguments to update many ProductItems.
   * @example
   * // Update many ProductItems
   * const productItem = await prisma.productItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductItems and only return the `id`
   * const productItemWithIdOnly = await prisma.productItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductItem.
   * @param {ProductItemUpsertArgs} args - Arguments to update or create a ProductItem.
   * @example
   * // Update or create a ProductItem
   * const productItem = await prisma.productItem.upsert({
   *   create: {
   *     // ... data to create a ProductItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductItem we want to update
   *   }
   * })
   */
  upsert<T extends ProductItemUpsertArgs>(args: Prisma.SelectSubset<T, ProductItemUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductItemClient<runtime.Types.Result.GetResult<Prisma.$ProductItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductItemCountArgs} args - Arguments to filter ProductItems to count.
   * @example
   * // Count the number of ProductItems
   * const count = await prisma.productItem.count({
   *   where: {
   *     // ... the filter for the ProductItems we want to count
   *   }
   * })
  **/
  count<T extends ProductItemCountArgs>(
    args?: Prisma.Subset<T, ProductItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductItemAggregateArgs>(args: Prisma.Subset<T, ProductItemAggregateArgs>): Prisma.PrismaPromise<GetProductItemAggregateType<T>>

  /**
   * Group by ProductItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductItemGroupByArgs['orderBy'] }
      : { orderBy?: ProductItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductItem model
 */
readonly fields: ProductItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  cartItems<T extends Prisma.ProductItem$cartItemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductItem$cartItemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductItem model
 */
export interface ProductItemFieldRefs {
  readonly id: Prisma.FieldRef<"ProductItem", 'String'>
  readonly productId: Prisma.FieldRef<"ProductItem", 'String'>
  readonly price: Prisma.FieldRef<"ProductItem", 'Float'>
  readonly size: Prisma.FieldRef<"ProductItem", 'Int'>
  readonly pizzaType: Prisma.FieldRef<"ProductItem", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ProductItem", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProductItem", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProductItem findUnique
 */
export type ProductItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemInclude<ExtArgs> | null
  /**
   * Filter, which ProductItem to fetch.
   */
  where: Prisma.ProductItemWhereUniqueInput
}

/**
 * ProductItem findUniqueOrThrow
 */
export type ProductItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemInclude<ExtArgs> | null
  /**
   * Filter, which ProductItem to fetch.
   */
  where: Prisma.ProductItemWhereUniqueInput
}

/**
 * ProductItem findFirst
 */
export type ProductItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemInclude<ExtArgs> | null
  /**
   * Filter, which ProductItem to fetch.
   */
  where?: Prisma.ProductItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductItems to fetch.
   */
  orderBy?: Prisma.ProductItemOrderByWithRelationInput | Prisma.ProductItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductItems.
   */
  cursor?: Prisma.ProductItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductItems.
   */
  distinct?: Prisma.ProductItemScalarFieldEnum | Prisma.ProductItemScalarFieldEnum[]
}

/**
 * ProductItem findFirstOrThrow
 */
export type ProductItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemInclude<ExtArgs> | null
  /**
   * Filter, which ProductItem to fetch.
   */
  where?: Prisma.ProductItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductItems to fetch.
   */
  orderBy?: Prisma.ProductItemOrderByWithRelationInput | Prisma.ProductItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductItems.
   */
  cursor?: Prisma.ProductItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductItems.
   */
  distinct?: Prisma.ProductItemScalarFieldEnum | Prisma.ProductItemScalarFieldEnum[]
}

/**
 * ProductItem findMany
 */
export type ProductItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemInclude<ExtArgs> | null
  /**
   * Filter, which ProductItems to fetch.
   */
  where?: Prisma.ProductItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductItems to fetch.
   */
  orderBy?: Prisma.ProductItemOrderByWithRelationInput | Prisma.ProductItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductItems.
   */
  cursor?: Prisma.ProductItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductItems.
   */
  skip?: number
  distinct?: Prisma.ProductItemScalarFieldEnum | Prisma.ProductItemScalarFieldEnum[]
}

/**
 * ProductItem create
 */
export type ProductItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductItem.
   */
  data: Prisma.XOR<Prisma.ProductItemCreateInput, Prisma.ProductItemUncheckedCreateInput>
}

/**
 * ProductItem createMany
 */
export type ProductItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductItems.
   */
  data: Prisma.ProductItemCreateManyInput | Prisma.ProductItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductItem createManyAndReturn
 */
export type ProductItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * The data used to create many ProductItems.
   */
  data: Prisma.ProductItemCreateManyInput | Prisma.ProductItemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductItem update
 */
export type ProductItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductItem.
   */
  data: Prisma.XOR<Prisma.ProductItemUpdateInput, Prisma.ProductItemUncheckedUpdateInput>
  /**
   * Choose, which ProductItem to update.
   */
  where: Prisma.ProductItemWhereUniqueInput
}

/**
 * ProductItem updateMany
 */
export type ProductItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductItems.
   */
  data: Prisma.XOR<Prisma.ProductItemUpdateManyMutationInput, Prisma.ProductItemUncheckedUpdateManyInput>
  /**
   * Filter which ProductItems to update
   */
  where?: Prisma.ProductItemWhereInput
  /**
   * Limit how many ProductItems to update.
   */
  limit?: number
}

/**
 * ProductItem updateManyAndReturn
 */
export type ProductItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * The data used to update ProductItems.
   */
  data: Prisma.XOR<Prisma.ProductItemUpdateManyMutationInput, Prisma.ProductItemUncheckedUpdateManyInput>
  /**
   * Filter which ProductItems to update
   */
  where?: Prisma.ProductItemWhereInput
  /**
   * Limit how many ProductItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductItem upsert
 */
export type ProductItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductItem to update in case it exists.
   */
  where: Prisma.ProductItemWhereUniqueInput
  /**
   * In case the ProductItem found by the `where` argument doesn't exist, create a new ProductItem with this data.
   */
  create: Prisma.XOR<Prisma.ProductItemCreateInput, Prisma.ProductItemUncheckedCreateInput>
  /**
   * In case the ProductItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductItemUpdateInput, Prisma.ProductItemUncheckedUpdateInput>
}

/**
 * ProductItem delete
 */
export type ProductItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemInclude<ExtArgs> | null
  /**
   * Filter which ProductItem to delete.
   */
  where: Prisma.ProductItemWhereUniqueInput
}

/**
 * ProductItem deleteMany
 */
export type ProductItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductItems to delete
   */
  where?: Prisma.ProductItemWhereInput
  /**
   * Limit how many ProductItems to delete.
   */
  limit?: number
}

/**
 * ProductItem.cartItems
 */
export type ProductItem$cartItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CartItem
   */
  select?: Prisma.CartItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CartItem
   */
  omit?: Prisma.CartItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CartItemInclude<ExtArgs> | null
  where?: Prisma.CartItemWhereInput
  orderBy?: Prisma.CartItemOrderByWithRelationInput | Prisma.CartItemOrderByWithRelationInput[]
  cursor?: Prisma.CartItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CartItemScalarFieldEnum | Prisma.CartItemScalarFieldEnum[]
}

/**
 * ProductItem without action
 */
export type ProductItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductItem
   */
  select?: Prisma.ProductItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductItem
   */
  omit?: Prisma.ProductItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductItemInclude<ExtArgs> | null
}
