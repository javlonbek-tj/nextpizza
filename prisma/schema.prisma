generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String   @unique
  password String?
  role     UserRole @default(USER)
  verified   DateTime?

  accounts Account[]

  Cart Cart?

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  VerificationCode VerificationCode?
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String
  refreshToken       String? @db.Text
  accessToken        String? @db.Text
  expiresAt          Int?
  tokenType          String?
  scope              String?
  idToken            String? @db.Text
  sessionState       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model Product {
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String

  productItems  ProductItem[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  price     Float
  size      Int?
  pizzaType Int?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems   CartItem[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id   Int    @id @default(autoincrement())
  name String @unique

  price    Float
  imageUrl String

  products    Product[]
  ingredients CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  userId Int?   @unique
  user   User? @relation(fields: [userId], references: [id])

  token String

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  ingredients Ingredient[]

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int
  quantity      Int         @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  code String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum UserRole {
  USER
  ADMIN
}
