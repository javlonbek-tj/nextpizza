generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  name          String
  image         String?
  email         String?   @unique
  password      String?
  role          UserRole  @default(USER)
  emailVerified DateTime?

  accounts Account[]

  Cart Cart?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id       String @id @default(cuid())
  name     String
  imageUrl String

  productItems ProductItem[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id])
  productId String

  price     Float
  size      Int?
  pizzaType Int?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id   String @id @default(cuid())
  name String @unique

  price    Float
  imageUrl String

  products    Product[]
  ingredients CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(cuid())

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  token String

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id String @id @default(cuid())

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  ingredients Ingredient[]

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int
  quantity      Int         @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  USER
  ADMIN
}
